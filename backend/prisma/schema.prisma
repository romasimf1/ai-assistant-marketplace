// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String
  firstName   String?
  lastName    String?
  phone       String?
  address     Json?    // Philadelphia-specific address fields
  preferences Json?
  subscriptionTier String @default("free")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders      Order[]
  transactions Transaction[]
  reviews     Review[]

  @@map("users")
}

model Assistant {
  id           String @id @default(cuid())
  name         String
  slug         String @unique
  description  String
  category     String
  voiceConfig  Json // ElevenLabs voice settings
  aiModel      String @default("gpt-4")
  pricing      Json // tier-based pricing
  isActive     Boolean @default(true)
  demoAvailable Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orders       Order[]
  reviews      Review[]

  @@map("assistants")
}

model Order {
  id              String @id @default(cuid())
  userId          String
  assistantId     String
  serviceDetails  Json // order-specific data
  status          String @default("pending")
  totalAmount     Float
  currency        String @default("USD")
  stripePaymentId String?
  fulfillmentData Json? // provider response data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant       Assistant @relation(fields: [assistantId], references: [id])
  transactions    Transaction[]
  reviews         Review[]

  @@map("orders")
}

model Transaction {
  id                String @id @default(cuid())
  orderId           String
  userId            String
  amount            Float
  currency          String @default("USD")
  type              String // payment, refund, commission
  status            String @default("pending")
  stripeTransactionId String?
  createdAt         DateTime @default(now())

  // Relations
  order             Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Review {
  id         String @id @default(cuid())
  userId     String
  assistantId String
  orderId    String
  rating     Int
  comment    String?
  isVerified Boolean @default(false)
  createdAt  DateTime @default(now())

  // Relations
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant  Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  order      Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
